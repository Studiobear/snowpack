// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`svelte plugin base 1`] = `
Object {
  ".css": Object {
    "code": "body{margin:0;font-family:Arial, Helvetica, sans-serif}.App.svelte-1wibndw{text-align:center}.App-header.svelte-1wibndw{background-color:#F9F6F6;color:#333;min-height:100vh;display:flex;flex-direction:column;align-items:center;justify-content:center;font-size:calc(10px + 2vmin)}.App-link.svelte-1wibndw{color:#ff3e00}.App-logo.svelte-1wibndw{height:40vmin;pointer-events:none;margin-bottom:1.0rem;animation:svelte-1wibndw-App-logo-spin infinite 1.6s ease-in-out alternate}@keyframes svelte-1wibndw-App-logo-spin{from{transform:scale(1)}to{transform:scale(1.06)}}",
    "map": undefined,
  },
  ".js": Object {
    "code": "/* plugins/plugin-svelte/test/stubs/SvelteContent.svelte generated by Svelte v3.29.0 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	attr_dev,
	detach_dev,
	dispatch_dev,
	element,
	init,
	insert_dev,
	noop,
	safe_not_equal,
	space,
	text,
	validate_slots
} from \\"svelte/internal\\";

const file = \\"plugins/plugin-svelte/test/stubs/SvelteContent.svelte\\";

function create_fragment(ctx) {
	let div;
	let header;
	let img;
	let img_src_value;
	let t0;
	let p;
	let t1;
	let code;
	let t3;
	let t4;
	let a;

	const block = {
		c: function create() {
			div = element(\\"div\\");
			header = element(\\"header\\");
			img = element(\\"img\\");
			t0 = space();
			p = element(\\"p\\");
			t1 = text(\\"Edit \\");
			code = element(\\"code\\");
			code.textContent = \\"src/App.svelte\\";
			t3 = text(\\" and save to reload.\\");
			t4 = space();
			a = element(\\"a\\");
			a.textContent = \`\${message}\`;
			if (img.src !== (img_src_value = \\"/logo.svg\\")) attr_dev(img, \\"src\\", img_src_value);
			attr_dev(img, \\"class\\", \\"App-logo svelte-1wibndw\\");
			attr_dev(img, \\"alt\\", \\"logo\\");
			add_location(img, file, 43, 2, 727);
			add_location(code, file, 45, 8, 793);
			add_location(p, file, 44, 2, 781);
			attr_dev(a, \\"class\\", \\"App-link svelte-1wibndw\\");
			attr_dev(a, \\"href\\", \\"https://svelte.dev\\");
			attr_dev(a, \\"target\\", \\"_blank\\");
			attr_dev(a, \\"rel\\", \\"noopener noreferrer\\");
			add_location(a, file, 47, 2, 850);
			attr_dev(header, \\"class\\", \\"App-header svelte-1wibndw\\");
			add_location(header, file, 42, 1, 697);
			attr_dev(div, \\"class\\", \\"App svelte-1wibndw\\");
			add_location(div, file, 41, 0, 678);
		},
		l: function claim(nodes) {
			throw new Error(\\"options.hydrate only works if the component was compiled with the \`hydratable: true\` option\\");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, header);
			append_dev(header, img);
			append_dev(header, t0);
			append_dev(header, p);
			append_dev(p, t1);
			append_dev(p, code);
			append_dev(p, t3);
			append_dev(header, t4);
			append_dev(header, a);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev(\\"SvelteRegisterBlock\\", {
		block,
		id: create_fragment.name,
		type: \\"component\\",
		source: \\"\\",
		ctx
	});

	return block;
}

const message = \\"Learn Svelte\\";

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots(\\"SvelteContent\\", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== \\"$$\\") console.warn(\`<SvelteContent> was created with unknown prop '\${key}'\`);
	});

	$$self.$capture_state = () => ({ message });
	return [];
}

class SvelteContent extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev(\\"SvelteRegisterComponent\\", {
			component: this,
			tagName: \\"SvelteContent\\",
			options,
			id: create_fragment.name
		});
	}
}

export default SvelteContent;",
    "map": undefined,
  },
}
`;
